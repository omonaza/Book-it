-------------------------------------------------------------------------------
Test set: www.logisense.com.cucumber.testrunners.wizard.WizardNewProductRequestTest
-------------------------------------------------------------------------------
Tests run: 395, Failures: 44, Errors: 0, Skipped: 18, Time elapsed: 43.21 s <<< FAILURE! - in www.logisense.com.cucumber.testrunners.wizard.WizardNewProductRequestTest
Given verify that productRegions is set with following fields(Scenario: verify that productRegions have been created)  Time elapsed: 0.008 s  <<< FAILURE!
java.lang.AssertionError: failure of regionName  expected:<Eilat> but was:<null>

Scenario: verify that productRegions have been created  Time elapsed: 0.008 s  <<< FAILURE!
java.lang.AssertionError: failure of regionName  expected:<Eilat> but was:<null>

Given verify that productIncludedTags is set with following fields(Scenario: verify that productIncludedTags have been created)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: failure of subTagName  expected:<WiFi> but was:<null>

Scenario: verify that productIncludedTags have been created  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: failure of subTagName  expected:<WiFi> but was:<null>

Given verify that productExcludedTags is set with following fields(Scenario: verify that productExcludedTags have been created)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: failure of subTagName  expected:<Food> but was:<null>

Scenario: verify that productExcludedTags have been created  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: failure of subTagName  expected:<Food> but was:<null>

Given verify that productTags is set with following fields(Scenario: verify that productTags has been created)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: failure of subTagName  expected:<Extreme> but was:<null>

Scenario: verify that productTags has been created  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: failure of subTagName  expected:<Extreme> but was:<null>

Then verify status code is 500(Scenario: Provider creates a new product with the same data)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: Provider creates a new product with the same data  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 400(Scenario: Provider creates a new product with empty name field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Scenario: Provider creates a new product with empty name field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Then verify status code is 500(Scenario: Provider creates a new product with missing shortDescription field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: Provider creates a new product with missing shortDescription field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: Provider creates a new product with missing fullDescription field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: Provider creates a new product with missing fullDescription field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: Provider creates a new product with empty shortDescription field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: Provider creates a new product with empty shortDescription field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: Provider creates a new product with empty fullDescription field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: Provider creates a new product with empty fullDescription field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: Provider creates a new product with empty address field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: Provider creates a new product with empty address field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: Provider creates a new product with missing address field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: Provider creates a new product with missing address field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: provider enters a data in productTypes with missing name field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: provider enters a data in productTypes with missing name field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: provider enters a data in ProductWorkingDates with empty name field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: provider enters a data in ProductWorkingDates with empty name field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 400(Scenario: provider enters a data in timeSlots with missing startTime field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Scenario: provider enters a data in timeSlots with missing startTime field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Then verify status code is 400(Scenario: provider enters a data in timeSlots with missing endTime field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Scenario: provider enters a data in timeSlots with missing endTime field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Then verify status code is 500(Scenario: provider enters a data in timeSlots with empty  dayOfWeek field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: provider enters a data in timeSlots with empty  dayOfWeek field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 500(Scenario: provider enters a data in timeSlots with missing  dayOfWeek field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Scenario: provider enters a data in timeSlots with missing  dayOfWeek field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<500> but was:<200>

Then verify status code is 400(Scenario: provider enters a data in timeSlots with missing  duration field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Scenario: provider enters a data in timeSlots with missing  duration field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Then verify status code is 400(Scenario: provider enters a data in productPrices with missing  fromDate field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Scenario: provider enters a data in productPrices with missing  fromDate field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Then verify status code is 400(Scenario: provider enters a data in productPrices with empty  title field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Scenario: provider enters a data in productPrices with empty  title field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Then verify status code is 400(Scenario: provider enters a data in productPrices with missing  title field)  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

Scenario: provider enters a data in productPrices with missing  title field  Time elapsed: 0 s  <<< FAILURE!
java.lang.AssertionError: expected:<400> but was:<200>

